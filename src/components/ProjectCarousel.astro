---
// src/components/ProjectCarousel.astro
interface Project {
  id: number;
  title: string;
  category: string;
  description: string;
  image: string;
  technologies: string[];
  link?: string;
  year: string;
}

export interface Props {
  projects: Project[];
}

const { projects } = Astro.props;
---

<section class="project-carousel">
  <div class="carousel-container">
    <!-- 轮播主体 -->
    <div class="carousel-wrapper">
      <div class="carousel-track" id="carouselTrack">
        {projects.map((project, index) => (
          <div class="carousel-slide" data-slide={index}>
            <div class="slide-content">
              <div class="slide-image">
                <img src={project.image} alt={project.title} loading="lazy" />
                <div class="image-overlay"></div>
              </div>
              <div class="slide-info">
                <div class="project-meta">
                  <span class="project-category">{project.category}</span>
                  <span class="project-year">{project.year}</span>
                </div>
                <h2 class="project-title">{project.title}</h2>
                <p class="project-description">{project.description}</p>
                <div class="project-technologies">
                  {project.technologies.map(tech => (
                    <span class="tech-tag">{tech}</span>
                  ))}
                </div>                {project.link && (
                  <a href={project.link} class="view-project-btn">
                    View Project <span class="arrow">→</span>
                  </a>
                )}
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>

    <!-- 导航控制 -->
    <div class="carousel-controls">
      <button class="carousel-btn prev-btn" id="prevBtn">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
          <path d="M15 18L9 12L15 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </button>
      <button class="carousel-btn next-btn" id="nextBtn">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
          <path d="M9 18L15 12L9 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </button>
    </div>

    <!-- 指示器 -->
    <div class="carousel-indicators">
      {projects.map((_, index) => (
        <button 
          class={`indicator ${index === 0 ? 'active' : ''}`} 
          data-slide={index}
        ></button>
      ))}
    </div>

    <!-- 项目计数器 -->
    <div class="project-counter">
      <span class="current-slide">01</span>
      <span class="separator">/</span>
      <span class="total-slides">{projects.length.toString().padStart(2, '0')}</span>
    </div>
  </div>
</section>

<style>
.project-carousel {
    position: relative;
    height: 100vh;
    overflow: hidden;
    background: #0a0a0a; /* 與 --background-dark 保持一致 */
  }

  .carousel-container {
    position: relative;
    width: 100%;
    height: 100%;
  }

  .carousel-wrapper {
    position: relative;
    width: 100%;
    height: 100%;
    overflow: hidden;
  }

  .carousel-track {
    display: flex;
    width: 100%;
    height: 100%;
    transition: transform 0.8s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .carousel-slide {
    min-width: 100%;
    height: 100%;
    position: relative;
    display: flex;
    align-items: center;
  }

  .slide-content {
    display: grid;
    grid-template-columns: 1fr 1fr;
    width: 100%;
    height: 100%;
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 4rem;
    gap: 4rem;
    align-items: center;
  }

  .slide-image {
    position: relative;
    height: 70vh;
    border-radius: 16px;
    overflow: hidden;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5);
  }

  .slide-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.8s ease;
  }

  .carousel-slide:hover .slide-image img {
    transform: scale(1.05);
  }

  .image-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(135deg, rgba(59, 130, 246, 0.1), rgba(139, 92, 246, 0.1));
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .carousel-slide:hover .image-overlay {
    opacity: 1;
  }

  .slide-info {
    padding: 2rem 0;
    color: #fff;
  }

  .project-meta {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1.5rem;
    font-size: 0.9rem;
    text-transform: uppercase;
    letter-spacing: 0.1em;
  }

  .project-category {
    background: linear-gradient(135deg, #3b82f6, #8b5cf6);
    padding: 0.5rem 1rem;
    border-radius: 20px;
    font-weight: 600;
  }

  .project-year {
    color: #888;
    font-weight: 500;
  }

  .project-title {
    font-size: 3.5rem;
    font-weight: 700;
    line-height: 1.1;
    margin-bottom: 1.5rem;
    background: linear-gradient(135deg, #fff, #e5e7eb);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .project-description {
    font-size: 1.2rem;
    line-height: 1.6;
    color: #b0b0b0;
    margin-bottom: 2rem;
    max-width: 500px;
  }

  .project-technologies {
    display: flex;
    flex-wrap: wrap;
    gap: 0.75rem;
    margin-bottom: 2.5rem;
  }

  .tech-tag {
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    padding: 0.5rem 1rem;
    border-radius: 8px;
    font-size: 0.9rem;
    color: #e5e7eb;
    backdrop-filter: blur(10px);
  }
  .view-project-btn {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    background: transparent;
    border: 2px solid #3b82f6;
    color: #3b82f6;
    padding: 1rem 2rem;
    border-radius: 50px;
    text-decoration: none;
    font-weight: 600;
    font-size: 1rem;
    transition: all 0.3s ease;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    cursor: pointer;
    font-family: inherit;
  }

  .view-project-btn:hover {
    background: #3b82f6;
    color: #fff;
    transform: translateY(-2px);
    box-shadow: 0 10px 30px rgba(59, 130, 246, 0.3);
  }

  .arrow {
    transition: transform 0.3s ease;
  }

  .view-project-btn:hover .arrow {
    transform: translateX(4px);
  }

  /* 控制按钮 */
  .carousel-controls {
    position: absolute;
    top: 50%;
    left: 0;
    right: 0;
    transform: translateY(-50%);
    display: flex;
    justify-content: space-between;
    padding: 0 2rem;
    z-index: 10;
  }

  .carousel-btn {
    width: 60px;
    height: 60px;
    border: 2px solid rgba(255, 255, 255, 0.3);
    background: rgba(255, 255, 255, 0.1);
    color: #fff;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    backdrop-filter: blur(10px);
  }

  .carousel-btn:hover {
    border-color: #3b82f6;
    background: rgba(59, 130, 246, 0.2);
    transform: scale(1.1);
  }
  /* 指示器 */
  .carousel-indicators {
    position: absolute;
    bottom: 2rem;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    gap: 1rem;
    z-index: 10;
  }
  .indicator {
    /* 重置默認 button 樣式 */
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;
    border: none;
    padding: 0;
    margin: 0;
    outline: none;
    
    /* 自定義樣式 */
    width: 12px;
    height: 12px;
    border-radius: 50%;
    border: 2px solid rgba(255, 255, 255, 0.3);
    background: transparent;
    cursor: pointer;
    transition: all 0.3s ease;
    flex-shrink: 0;
    box-sizing: border-box;
  }

  .indicator.active,
  .indicator:hover {
    border-color: #3b82f6;
    background: #3b82f6;
    transform: scale(1.2);
  }

  /* 项目计数器 */
  .project-counter {
    position: absolute;
    top: 2rem;
    right: 2rem;
    color: #fff;
    font-size: 1.1rem;
    font-weight: 600;
    z-index: 10;
    font-family: 'Courier New', monospace;
  }

  .separator {
    margin: 0 0.5rem;
    color: #666;
  }

  /* 响应式设计 */
  @media (max-width: 1024px) {
    .slide-content {
      grid-template-columns: 1fr;
      text-align: center;
      padding: 0 2rem;
      gap: 2rem;
    }

    .slide-image {
      height: 50vh;
      order: -1;
    }

    .project-title {
      font-size: 2.5rem;
    }

    .carousel-controls {
      padding: 0 1rem;
    }
  }

  @media (max-width: 768px) {
    .slide-content {
      padding: 0 1rem;
    }

    .project-title {
      font-size: 2rem;
    }

    .project-description {
      font-size: 1rem;
    }

    .carousel-btn {
      width: 50px;
      height: 50px;
    }

    .project-counter {
      top: 1rem;
      right: 1rem;
      font-size: 1rem;
    }
  }
</style>

<script>
  class ProjectCarousel {
    private track: HTMLElement;
    private slides: NodeListOf<HTMLElement>;
    private indicators: NodeListOf<HTMLElement>;
    private prevBtn: HTMLElement;
    private nextBtn: HTMLElement;
    private currentSlide: HTMLElement;
    private currentIndex: number = 0;
    private isAnimating: boolean = false;

    constructor() {
      this.track = document.getElementById('carouselTrack') as HTMLElement;
      this.slides = document.querySelectorAll('.carousel-slide');
      this.indicators = document.querySelectorAll('.indicator');
      this.prevBtn = document.getElementById('prevBtn') as HTMLElement;
      this.nextBtn = document.getElementById('nextBtn') as HTMLElement;
      this.currentSlide = document.querySelector('.current-slide') as HTMLElement;

      this.init();
    }

    private init(): void {
      this.bindEvents();
      this.updateUI();
      this.startAutoPlay();
    }

    private bindEvents(): void {
      this.prevBtn?.addEventListener('click', () => this.prevSlide());
      this.nextBtn?.addEventListener('click', () => this.nextSlide());

      this.indicators.forEach((indicator, index) => {
        indicator.addEventListener('click', () => this.goToSlide(index));
      });

      // 键盘导航
      document.addEventListener('keydown', (e) => {
        if (e.key === 'ArrowLeft') this.prevSlide();
        if (e.key === 'ArrowRight') this.nextSlide();
      });

      // 触摸支持
      let startX = 0;
      this.track?.addEventListener('touchstart', (e) => {
        startX = e.touches[0].clientX;
      });

      this.track?.addEventListener('touchend', (e) => {
        const endX = e.changedTouches[0].clientX;
        const diff = startX - endX;
        
        if (Math.abs(diff) > 50) {
          if (diff > 0) {
            this.nextSlide();
          } else {
            this.prevSlide();
          }
        }
      });
    }

    private goToSlide(index: number): void {
      if (this.isAnimating || index === this.currentIndex) return;

      this.isAnimating = true;
      this.currentIndex = index;

      const translateX = -index * 100;
      this.track.style.transform = `translateX(${translateX}%)`;

      setTimeout(() => {
        this.isAnimating = false;
      }, 800);

      this.updateUI();
    }

    private nextSlide(): void {
      const nextIndex = (this.currentIndex + 1) % this.slides.length;
      this.goToSlide(nextIndex);
    }

    private prevSlide(): void {
      const prevIndex = this.currentIndex === 0 ? this.slides.length - 1 : this.currentIndex - 1;
      this.goToSlide(prevIndex);
    }

    private updateUI(): void {
      // 更新指示器
      this.indicators.forEach((indicator, index) => {
        indicator.classList.toggle('active', index === this.currentIndex);
      });

      // 更新计数器
      if (this.currentSlide) {
        this.currentSlide.textContent = (this.currentIndex + 1).toString().padStart(2, '0');
      }
    }

    private startAutoPlay(): void {
      setInterval(() => {
        if (!this.isAnimating) {
          this.nextSlide();
        }
      }, 7000); // 7秒自动切换
    }
  }

  // 初始化轮播
  document.addEventListener('DOMContentLoaded', () => {
    new ProjectCarousel();
  });
</script>
