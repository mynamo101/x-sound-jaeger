---
import FooterArrowIcon from "@assets/icons/FooterArrowIcon.astro";
import type { FormHeroProps } from "@src-types/types";

import "@styles/form-page.css"
import "@styles/password-strength.css"
import "@styles/notification.css"

const { type, has_link = false, title, description } = Astro.props as FormHeroProps;
const { t, globalSettings } = Astro.props;

// 新增表單 id 變數，避免語法錯誤
const formId = type === "Signin" ? "signinForm" : "signupForm";
---

<section class="hero form-page wide-container">
    <div class="form-page-outer">
        <div class:list={['hero-top-border', { 'horizontal-line-animation': globalSettings.use_page_load_animations }]}></div> 

        <div class="form-page-inner section-padding-extra">  
            <div class="form-page-content">
                <h1 class:list={[{ 'letter-animation': globalSettings.use_page_load_animations }]}>{title}</h1>

                {description &&
                    <div class:list={['form-page-excerpt-container', { 'vertical-animation': globalSettings.use_page_load_animations }]} data-delay="300">
                        <p class="form-page-excerpt">
                            {description}
                        </p>
                    </div>
                }

                {type === "Contact" ? (
                    <div class:list={["form-container contact-form-container", { "vertical-animation": globalSettings.use_page_load_animations }]} data-delay="400">
                        <form class="contact-form" action="https://formspree.io/f/xpwrrnbp" method="POST" id="contactForm">
                            <div class="contact-form-inputs">
                                <input type="email" name="email" placeholder={t.global.form.email} required/>
                            </div>
                            <textarea name="message" placeholder={t.global.form.message} required></textarea>
                            <button class="button" type="submit">
                                {t.contact_page.button_label}
                            </button>
                        </form>
                    </div>                ) : type === "About" ? (
                    <div class:list={["form-container", { "vertical-animation": globalSettings.use_page_load_animations }]} data-delay="400">
                        <slot/>
                    </div>
                )   :   (
                    <div class:list={["form-container", { "vertical-animation": globalSettings.use_page_load_animations }]} data-delay="400">
                        <form class="page-form-element" id={formId}>                            {type === "Signin" ? (
                                <div class="vertical-form">
                                    <input data-members-email type="email" required="true" placeholder={t.global.form.email} class="subscribe-input"/>
                                    <input data-members-password type="password" required="true" placeholder={t.global.form.password || 'Password'} class="subscribe-input"/>
                                    <button class="button" type="submit">{t.signin_page.button_label || 'Sign In'}</button>
                                </div>                            )   :   (
                                <div class="vertical-form">
                                    <input data-members-name type="text" required="true" placeholder={t.global.form.name}/>
                                    <input data-members-username type="text" required="true" placeholder={t.global.form.username}/>
                                    <input data-members-email type="email" required="true" placeholder={t.global.form.email}/>
                                    <div class="password-input-container">
                                        <input data-members-password type="password" required="true" placeholder={t.global.form.password || 'Password'} id="signup-password"/>
                                        <div class="password-strength-indicator" id="password-strength">
                                            <div class="strength-bar"></div>
                                            <div class="strength-text">Password Strength</div>
                                        </div>                                        <div class="password-requirements" id="password-requirements">
                                            <div class="requirement" id="req-length">At least 8 characters</div>
                                            <div class="requirement" id="req-lowercase">One lowercase letter</div>
                                            <div class="requirement" id="req-uppercase">One uppercase letter</div>
                                        </div>
                                    </div>
                                    <button class="button" type="submit" id="signup-submit" disabled>{type === "Signup" ? <>{t.signup_page.button_label}</> : <>{t.subscribe_page.button_label}</>}</button>
                                </div>
                            )}

                            {has_link &&
                                <small class="under-form-text">
                                    <span class="lower-opacity-small-text">
                                        {type === "Signin" ? <>{t.signin_page.no_account}</> : <>{t.signup_page.has_account}</>}
                                    </span>
                                    <a class="bold-link" href={type === "Signin" ? '/signup/' : '/signin/'}>
                                        {type === "Signin" ? <>{t.signin_page.sign_up}</> : <>{t.signup_page.sign_in}</>}
                                    </a>
                                </small>
                            }
                        </form>
                    </div>
                )}
                        
            </div>
         </div>

        <div class:list={['hero-bottom-border', { 'horizontal-line-animation': globalSettings.use_page_load_animations }]}></div>
    </div>
</section>

{type === "Signup" && (
  <script is:inline>
    document.addEventListener('DOMContentLoaded', function() {
      // Wait for global scripts to load
      function waitForGlobals() {
        if (typeof window.notify !== 'undefined' && typeof window.membershipAuth !== 'undefined') {
          setupSignupForm();
        } else {
          setTimeout(waitForGlobals, 100);
        }
      }
      
      function setupSignupForm() {
        // Password strength validation
        function validatePassword(password) {
          const requirements = {
            length: password.length >= 8,
            lowercase: /[a-z]/.test(password),
            uppercase: /[A-Z]/.test(password)
          };
          
          const score = Object.values(requirements).filter(Boolean).length;
          let strength = 'weak';
          
          if (score === 3) strength = 'strong';
          else if (score >= 2) strength = 'good';
          else if (score >= 1) strength = 'fair';
          
          return { requirements, strength, score };
        }

        function updatePasswordStrength() {
          const passwordInput = document.getElementById('signup-password');
          const strengthBar = document.querySelector('.strength-bar');
          const strengthText = document.querySelector('.strength-text');
          const strengthIndicator = document.querySelector('.password-strength-indicator');
          const requirementsContainer = document.getElementById('password-requirements');
          const submitButton = document.getElementById('signup-submit');
          
          if (!passwordInput || !strengthBar || !strengthText || !requirementsContainer || !strengthIndicator) return;
          
          const password = passwordInput.value;
          
          if (password.length === 0) {
            // Hide strength indicator when password is empty
            strengthIndicator.classList.remove('show');
            strengthBar.className = 'strength-bar';
            strengthText.className = 'strength-text';
            strengthText.textContent = 'Password Strength';
            requirementsContainer.classList.remove('show');
            submitButton.disabled = true;
            return;
          }
          
          // Show strength indicator when user starts typing
          strengthIndicator.classList.add('show');
          
          const validation = validatePassword(password);
          
          // Update strength bar and text
          strengthBar.className = `strength-bar ${validation.strength}`;
          strengthText.className = `strength-text ${validation.strength}`;
          
          const strengthLabels = {
            weak: 'Weak',
            fair: 'Fair', 
            good: 'Good',
            strong: 'Strong'
          };
          
          strengthText.textContent = `Password Strength: ${strengthLabels[validation.strength]}`;
          
          // Update requirements
          requirementsContainer.classList.add('show');
          
          const reqElements = {
            length: document.getElementById('req-length'),
            lowercase: document.getElementById('req-lowercase'),
            uppercase: document.getElementById('req-uppercase')
          };
          
          Object.keys(validation.requirements).forEach(req => {
            const element = reqElements[req];
            if (element) {
              if (validation.requirements[req]) {
                element.classList.add('met');
              } else {
                element.classList.remove('met');
              }
            }
          });
          
          // Enable/disable submit button
          const allRequirementsMet = Object.values(validation.requirements).every(Boolean);
          submitButton.disabled = !allRequirementsMet;
        }
        
        // Setup password strength checking
        const passwordInput = document.getElementById('signup-password');
        if (passwordInput) {
          passwordInput.addEventListener('input', updatePasswordStrength);
          passwordInput.addEventListener('focus', updatePasswordStrength);
          // 初始化時也觸發一次，避免一開始不顯示
          updatePasswordStrength();
        }

        const form = document.getElementById('signupForm');
        if (form) {
          form.addEventListener('submit', async (e) => {
            e.preventDefault();
            const name = form.querySelector('[data-members-name]').value.trim();
            const username = form.querySelector('[data-members-username]').value.trim();
            const email = form.querySelector('[data-members-email]').value.trim();
            const password = form.querySelector('[data-members-password]').value;

            if (!name || !username || !email || !password) {
              window.notify.warning('Please fill in all required fields', {
                title: 'Missing Information'
              });
              return;
            }
            
            // Client-side password validation
            const validation = validatePassword(password);
            if (!Object.values(validation.requirements).every(Boolean)) {
              window.notify.error('Please ensure your password meets all security requirements', {
                title: 'Password Requirements'
              });
              return;
            }
            
            // Show loading notification
            const loadingId = window.notify.loading('Creating your account...', {
              title: 'Registering'
            });

            // Call API for registration
            const apiBase = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1' 
                ? 'http://localhost:3001' 
                : 'https://x.soundjaeger.com';
                
            try {
              const res = await fetch(`${apiBase}/api/signup`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ name, username, email, password })
              });
              
              const data = await res.json();
              
              // Remove loading notification
              window.notify.remove(loadingId);

              if (res.ok) {
                // Registration successful, auto login
                window.notify.success('Account created successfully! Signing you in...', {
                  title: 'Welcome!',
                  duration: 3000
                });
                
                if (window.membershipAuth) {
                  const loginResult = await window.membershipAuth.login(username, password);
                  if (loginResult.success) {
                    setTimeout(() => {
                      window.location.href = '/account/';
                    }, 1500);
                  } else {
                    window.notify.warning('Registration successful, but auto-login failed. Please log in manually', {
                      title: 'Registration Complete'
                    });
                  }
                } else {
                  window.notify.success('Registration successful, please log in manually', {
                    title: 'Registration Complete'
                  });
                }
              } else {
                // Show error after delay
                setTimeout(() => {
                  if (data.details && Array.isArray(data.details)) {
                    window.notify.error(data.details.join('\n'), {
                      title: 'Password Requirements Not Met'
                    });
                  } else if (data.error && data.error.includes('exists')) {
                    window.notify.warning('This username or email is already registered, please sign in directly', {
                      title: 'Account Already Exists'
                    });
                  } else {
                    window.notify.error(data.error || 'Registration failed', {
                      title: 'Registration Error'
                    });
                  }
                }, 200);
              }
            } catch (error) {
              // Remove loading notification
              window.notify.remove(loadingId);
              
              setTimeout(() => {
                window.notify.error('Network error occurred', {
                  title: 'Connection Error'
                });
              }, 200);
            }
          });
        }
      }
      
      waitForGlobals();
    });
  </script>
)}

{type === "Signin" && (
  <script is:inline>
    document.addEventListener('DOMContentLoaded', function() {
      let waitAttempts = 0;
      const maxWaitAttempts = 50; // 最多等待 5 秒
      // Wait for global scripts to load with timeout
      function waitForGlobals() {
        waitAttempts++;
        if (typeof window.notify !== 'undefined' && typeof window.membershipAuth !== 'undefined') {
          console.log('Global scripts loaded successfully');
          setupSigninForm();
        } else if (waitAttempts >= maxWaitAttempts) {
          console.warn('Global scripts failed to load, using fallback methods');
          setupSigninFormFallback();
        } else {
          setTimeout(waitForGlobals, 100);
        }
      }
      function setupSigninForm() {
        const form = document.getElementById('signinForm');
        if (form) {
          form.addEventListener('submit', async (e) => {
            e.preventDefault();
            console.log('Form submission intercepted');
            
            const email = form.querySelector('[data-members-email]').value.trim();
            const password = form.querySelector('[data-members-password]')?.value;

            console.log('Login attempt:', { email: email, hasPassword: !!password });

            if (!email) {
              if (window.notify) {
                window.notify.warning('Please enter your email address', {
                  title: 'Missing Email'
                });
              } else {
                alert('Please enter your email address');
              }
              return;
            }
            
            if (!password) {
              if (window.notify) {
                window.notify.warning('Please enter your password', {
                  title: 'Missing Password'
                });
              } else {
                alert('Please enter your password');
              }
              return;
            }

            // Show loading notification
            let loadingId;
            if (window.notify) {
              loadingId = window.notify.loading('Signing you in...', {
                title: 'Please wait'
              });
            }
            
            // Use membershipAuth for signin
            if (window.membershipAuth) {
              try {
                console.log('Using membershipAuth for login');
                const result = await window.membershipAuth.login(email, password);
                console.log('Login result:', result);
                
                // Remove loading notification
                if (window.notify && loadingId) {
                  window.notify.remove(loadingId);
                }
                
                if (result.success) {
                  // Replace loading notification with success notification
                  if (window.notify) {
                    window.notify.success('Welcome back! Redirecting to your account...', {
                      title: 'Login Successful',
                      duration: 2000
                    });
                  }
                  
                  setTimeout(() => {
                    window.location.href = '/account/';
                  }, 1500);
                } else {
                  // Show error
                  setTimeout(() => {
                    if (window.notify) {
                      window.notify.error(result.error || 'Login failed', {
                        title: 'Login Error'
                      });
                    } else {
                      alert('Login failed: ' + (result.error || 'Unknown error'));
                    }
                  }, 200);
                }
              } catch (error) {
                console.error('MembershipAuth error:', error);
                if (window.notify && loadingId) {
                  window.notify.remove(loadingId);
                }
                if (window.notify) {
                  window.notify.error('An unexpected error occurred', {
                    title: 'System Error'
                  });
                } else {
                  alert('An unexpected error occurred: ' + error.message);
                }
              }
            } else {
              console.log('Falling back to direct API call');
              await performDirectLogin(email, password, loadingId);
            }
          });
        } else {
          console.error('Form element not found');
        }
      }
      
      function setupSigninFormFallback() {
        const form = document.getElementById('signinForm');
        if (form) {
          form.addEventListener('submit', async (e) => {
            e.preventDefault();
            console.log('Form submission intercepted (fallback)');
            
            const email = form.querySelector('[data-members-email]').value.trim();
            const password = form.querySelector('[data-members-password]')?.value;

            if (!email || !password) {
              alert('Please enter both email and password');
              return;
            }

            await performDirectLogin(email, password);
          });
        }
      }
      
      async function performDirectLogin(email, password, loadingId = null) {
        const apiBase = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1' 
            ? 'http://localhost:3001' 
            : 'https://x.soundjaeger.com';
            
        try {
          console.log('Performing direct API login to:', apiBase + '/api/signin');
          const res = await fetch(`${apiBase}/api/signin`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ username: email, password })
          });
          
          console.log('API response status:', res.status);
          const data = await res.json();
          console.log('API response data:', data);
          
          // Remove loading notification
          if (window.notify && loadingId) {
            window.notify.remove(loadingId);
          }
          
          if (res.ok) {
            // Login successful, save data
            localStorage.setItem('auth_token', data.token);
            localStorage.setItem('user_info', JSON.stringify(data.user));
            localStorage.setItem('login_time', Date.now().toString());
            
            console.log('Login successful, data saved to localStorage');
            
            // Replace loading notification with success notification
            if (window.notify) {
              window.notify.success('Welcome back! Redirecting to your account...', {
                title: 'Login Successful',
                duration: 2000
              });
            } else {
              alert('Login successful! Redirecting...');
            }
            
            setTimeout(() => {
              window.location.href = '/account/';
            }, 1500);
          } else {
            // Show error
            console.error('Login failed:', data);
            setTimeout(() => {
              if (window.notify) {
                window.notify.error(data.error || 'Login failed', {
                  title: 'Login Error'
                });
              } else {
                alert('Login failed: ' + (data.error || 'Unknown error'));
              }
            }, 200);
          }
        } catch (error) {
          console.error('Direct login error:', error);
          // Remove loading notification
          if (window.notify && loadingId) {
            window.notify.remove(loadingId);
          }
          
          setTimeout(() => {
            if (window.notify) {
              window.notify.error('Network error occurred', {
                title: 'Connection Error'
              });
            } else {
              alert('Network error: ' + error.message);
            }
          }, 200);
        }
      }
      
      waitForGlobals();
    });
  </script>
)}