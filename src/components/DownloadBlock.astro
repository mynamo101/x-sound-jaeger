---
interface Props {
  downloadUrl: string;
  title?: string;
  description?: string;
  fileSize?: string;
  requiresMembership?: boolean;
  requiredTier?: 'Support' | 'Creator\'s Choice' | 'My Hero';
  fileId?: string;
}

const { 
  downloadUrl,
  title = "Download File",
  description = "",
  fileSize,
  requiresMembership = false,
  requiredTier = 'Support',
  fileId
} = Astro.props;

// Auto extract file info from download URL
const getFileInfo = (url: string) => {
  const fileName = url.split('/').pop() || 'unknown';
  const fileExtension = fileName.split('.').pop()?.toLowerCase() || '';
  // Determine format by extension
  const formatInfo = {
    'wav': { format: 'WAV', color: '#ff6b35' },
    'mp3': { format: 'MP3', color: '#4CAF50' },
    'flac': { format: 'FLAC', color: '#2196F3' },
    'aiff': { format: 'AIFF', color: '#9C27B0' },
    'ogg': { format: 'OGG', color: '#FF9800' },
    'm4a': { format: 'M4A', color: '#795548' },
    'aac': { format: 'AAC', color: '#607D8B' },
    'zip': { format: 'ZIP', color: '#607D8B' },
    'rar': { format: 'RAR', color: '#795548' },
    '7z': { format: '7Z', color: '#9C27B0' }
  };
  
  const info = formatInfo[fileExtension as keyof typeof formatInfo] || {
    format: fileExtension.toUpperCase(),
    color: '#666'
  };
  
  return {
    fileName,
    fileFormat: info.format,
    fileSize: fileSize || 'Unknown file size',
    formatColor: info.color
  };
};

const fileInfo = getFileInfo(downloadUrl);
---

<div class="download-block" data-download-url={downloadUrl} data-requires-membership={requiresMembership} data-required-tier={requiredTier} data-file-id={fileId}>
  <div class="download-header">
    <h3 class="download-title">{title}</h3>
    {description && <p class="download-description">{description}</p>}
    {requiresMembership && (
      <div class="membership-badge">
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect>
          <circle cx="12" cy="16" r="1"></circle>
          <path d="M7 11V7a5 5 0 0 1 10 0v4"></path>
        </svg>
        {requiredTier} membership required
      </div>
    )}
  </div>
  <div class="download-content">
    <div class="file-info">
      <div class="file-details">
        <h4 class="file-name">{fileInfo.fileName}</h4>
        <div class="file-meta">
          <span class="file-format" style={`background: ${fileInfo.formatColor}`}>{fileInfo.fileFormat}</span>
          <span class="file-size" data-file-size>{fileInfo.fileSize}</span>
        </div>
      </div>
      <div class="file-actions">
        <button class="download-btn" data-download-action>
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
            <polyline points="7,10 12,15 17,10"></polyline>
            <line x1="12" y1="15" x2="12" y2="3"></line>
          </svg>
          <span class="download-text">下載</span>
        </button>
      </div>
    </div>
  </div>
  
  <!-- 會員登錄提示 -->
  <div class="membership-prompt" style="display: none;">
    <div class="membership-prompt-content">
      <h4>需要會員資格</h4>
      <p>此內容需要 <strong>{requiredTier}</strong> 或更高等級的會員資格才能下載。</p>
      <div class="membership-actions">
        <a href="/signin" class="btn-signin">登錄</a>
        <a href="/membership" class="btn-upgrade">升級會員</a>
      </div>
    </div>
  </div>
</div>

<script>
  // 嘗試獲取真實檔案大小
  async function fetchFileSize(url: string): Promise<string> {
    try {
      const response = await fetch(url, { method: 'HEAD' });
      const contentLength = response.headers.get('Content-Length');
      
      if (contentLength) {
        const bytes = parseInt(contentLength);
        return formatFileSize(bytes);
      }
    } catch (error) {
      console.log('無法獲取檔案大小:', error);
    }
    return '';
  }

  function formatFileSize(bytes: number): string {
    if (bytes === 0) return '0 Bytes';
    
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }

  // 檢查用戶認證狀態
  function getAuthToken(): string | null {
    return localStorage.getItem('auth_token');
  }

  // 驗證下載權限
  async function checkDownloadAccess(fileId: string, requiredTier: string): Promise<{access: boolean, error?: string}> {
    const token = getAuthToken();
    
    if (!token) {
      return { access: false, error: 'not_authenticated' };
    }

    try {
      const response = await fetch(`/api/check-download-access/${fileId}`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      const data = await response.json();
      
      if (response.ok) {
        return { access: true };
      } else {
        return { access: false, error: data.error };
      }
    } catch (error) {
      return { access: false, error: 'network_error' };
    }
  }

  // 處理下載按鈕點擊
  async function handleDownloadClick(event: Event, block: Element) {
    event.preventDefault();
    
    const downloadUrl = block.getAttribute('data-download-url');
    const requiresMembership = block.getAttribute('data-requires-membership') === 'true';
    const requiredTier = block.getAttribute('data-required-tier');
    const fileId = block.getAttribute('data-file-id');
    const downloadBtn = block.querySelector('.download-btn') as HTMLButtonElement;
    const downloadText = downloadBtn.querySelector('.download-text') as HTMLElement;
    const membershipPrompt = block.querySelector('.membership-prompt') as HTMLElement;

    if (!requiresMembership) {
      // 直接下載，無需驗證
      window.open(downloadUrl, '_blank');
      return;
    }

    // 顯示載入狀態
    downloadText.textContent = '檢查權限...';
    downloadBtn.disabled = true;

    const accessCheck = await checkDownloadAccess(fileId || 'unknown', requiredTier || 'Support');

    if (accessCheck.access) {
      // 有權限，開始下載
      downloadText.textContent = '下載中...';
      window.open(downloadUrl, '_blank');
      setTimeout(() => {
        downloadText.textContent = '下載';
        downloadBtn.disabled = false;
      }, 2000);
    } else {
      // 無權限，顯示會員提示
      downloadText.textContent = '下載';
      downloadBtn.disabled = false;
      membershipPrompt.style.display = 'block';
      
      // 3秒後自動隱藏提示
      setTimeout(() => {
        membershipPrompt.style.display = 'none';
      }, 5000);
    }
  }

  // 當組件載入時初始化
  document.addEventListener('DOMContentLoaded', async () => {
    const downloadBlocks = document.querySelectorAll('.download-block[data-download-url]');
    
    for (const block of downloadBlocks) {
      const url = block.getAttribute('data-download-url');
      const fileSizeElement = block.querySelector('[data-file-size]');
      const downloadBtn = block.querySelector('[data-download-action]');

      // 獲取檔案大小
      if (url && fileSizeElement && fileSizeElement.textContent === '檔案大小未知') {
        const realSize = await fetchFileSize(url);
        if (realSize) {
          fileSizeElement.textContent = realSize;
        }
      }

      // 綁定下載事件
      if (downloadBtn) {
        downloadBtn.addEventListener('click', (event) => handleDownloadClick(event, block));
      }
    }
  });
</script>

<style>
  .download-block {
    background: linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%);
    border: 1px solid #333;
    border-radius: 12px;
    padding: 1.5rem;
    margin: 1.5rem 0;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
  }

  .download-block:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 15px rgba(0, 0, 0, 0.2);
    border-color: #444;
  }

  .download-header {
    margin-bottom: 1rem;
  }

  .download-title {
    color: #fff;
    font-size: 1.25rem;
    font-weight: 600;
    margin: 0 0 0.5rem 0;
  }

  .download-description {
    color: #ccc;
    font-size: 0.9rem;
    margin: 0;
    line-height: 1.5;
  }

  .download-content {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .file-info {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 1rem;
  }

  .file-details {
    flex: 1;
  }

  .file-name {
    color: #fff;
    font-size: 1rem;
    font-weight: 500;
    margin: 0 0 0.5rem 0;
    word-break: break-all;
  }

  .file-meta {
    display: flex;
    gap: 1rem;
    font-size: 0.85rem;
  }
  .file-format {
    color: #fff;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-weight: 500;
    text-transform: uppercase;
  }

  .file-size {
    color: #bbb;
    background: #333;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
  }
  .file-actions {
    display: flex;
    gap: 0.75rem;
    flex-shrink: 0;
  }

  .download-btn {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1rem;
    border-radius: 8px;
    text-decoration: none;
    font-size: 0.9rem;
    font-weight: 500;
    transition: all 0.2s ease;
    cursor: pointer;
    border: none;
    font-family: inherit;
    background: linear-gradient(135deg, #ff6b35 0%, #f7931e 100%);
    color: #fff;
  }

  .download-btn:hover {
    background: linear-gradient(135deg, #f7931e 0%, #ff6b35 100%);
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(255, 107, 53, 0.3);
  }
  .download-btn svg {
    flex-shrink: 0;
  }

  .membership-badge {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    background: linear-gradient(135deg, #ff6b35 0%, #f7931e 100%);
    color: #fff;
    padding: 0.5rem 0.75rem;
    border-radius: 6px;
    font-size: 0.8rem;
    font-weight: 500;
    margin-top: 0.5rem;
  }

  .membership-badge svg {
    flex-shrink: 0;
  }

  .membership-prompt {
    margin-top: 1rem;
    padding: 1rem;
    background: #2a2a2a;
    border: 1px solid #444;
    border-radius: 8px;
    border-left: 4px solid #ff6b35;
  }

  .membership-prompt-content h4 {
    color: #fff;
    margin: 0 0 0.5rem 0;
    font-size: 1rem;
  }

  .membership-prompt-content p {
    color: #ccc;
    margin: 0 0 1rem 0;
    font-size: 0.9rem;
    line-height: 1.4;
  }

  .membership-actions {
    display: flex;
    gap: 0.75rem;
  }

  .btn-signin,
  .btn-upgrade {
    padding: 0.5rem 1rem;
    border-radius: 6px;
    text-decoration: none;
    font-size: 0.85rem;
    font-weight: 500;
    transition: all 0.2s ease;
  }

  .btn-signin {
    background: #333;
    color: #fff;
    border: 1px solid #555;
  }

  .btn-signin:hover {
    background: #444;
    border-color: #666;
  }

  .btn-upgrade {
    background: linear-gradient(135deg, #ff6b35 0%, #f7931e 100%);
    color: #fff;
  }

  .btn-upgrade:hover {
    background: linear-gradient(135deg, #f7931e 0%, #ff6b35 100%);
  }

  .download-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none !important;
  }

  .download-btn:disabled:hover {
    background: linear-gradient(135deg, #ff6b35 0%, #f7931e 100%);
    box-shadow: none;
  }

  @media (max-width: 768px) {
    .download-block {
      padding: 1rem;
    }

    .file-info {
      flex-direction: column;
      align-items: stretch;
      gap: 1rem;
    }    .file-actions {
      justify-content: stretch;
    }

    .download-btn {
      flex: 1;
      justify-content: center;
    }

    .file-meta {
      flex-direction: column;
      gap: 0.5rem;
    }
  }
</style>