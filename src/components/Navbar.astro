---
import NavbarLink from "@components/NavbarLink.astro";
import NavbarDropdown from "@components/NavbarDropdown.astro";
import Logo from "@components/Logo.astro";
import AccountIcon from "@assets/icons/AccountIcon.astro";

import navbarSettings from "@config/navbar.json.ts";

import "@styles/navbar.css";
import "@styles/notification.css";

const { globalSettings, t } = Astro.props;
---

<custom-header class="header" data-navigation-bar-type={globalSettings.navigation_bar_type}>
    <div class:list={['wide-container navbar-inner', { 'vertical-animation': globalSettings.use_page_load_animations }]} data-delay="200">
        <div class="logo-wrapper">
            <Logo globalSettings={globalSettings}/>
        </div>

        <div class="mobile-navbar-icons">
            <button class="menu-button unstyled-button" aria-label="Menu button">
                <div class="menu-line first-line"></div>
                <div class="menu-line mobile-line"></div>
                <div class="menu-line second-line"></div>
            </button>
        </div>

        <div class="navbar-links-outer">
            <div class="navbar-links-inner">                <ul class="nav">
                    {
                        navbarSettings.map((navbarLink) =>
                            "dropdown" in navbarLink ? (
                                <NavbarDropdown navbarLink={navbarLink} />
                            ) : (
                                <NavbarLink navbarLink={navbarLink} class={"hover-underline"}/>
                            )
                        )
                    }
                </ul>                <div class="signin-wrapper acc-button-wrapper">
                    <a href="/signin/" class="acc-button" id="navbar-auth-button">
                        <div class="account-icon">
                            <AccountIcon/>
                        </div>
                        <span id="navbar-auth-text">
                            {t.global.navbar.contact}
                        </span>                              
                    </a>                </div>
            </div>
        </div>
    </div>
</custom-header>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        let signOutHandler = null;
        // window.notify 已可直接使用
        
        // 動態更新導航欄認證狀態
        function updateNavbarAuth() {
            const authButton = document.getElementById('navbar-auth-button');
            const authText = document.getElementById('navbar-auth-text');
            
            if (!authButton || !authText) return;
            
            const token = localStorage.getItem('auth_token');
            const isLoggedIn = !!token;
            
            // 取得當前語言
            const isZh = document.documentElement.lang === 'zh';
            
            // 先移除之前的事件監聽器
            if (signOutHandler) {
                authButton.removeEventListener('click', signOutHandler);
                signOutHandler = null;
            }
            
            if (isLoggedIn) {
                // 已登入：顯示 Sign out / 退出登录
                authText.textContent = isZh ? '退出登录' : 'Sign out';
                authButton.setAttribute('href', '#');
                
                // 添加登出處理
                signOutHandler = function(e) {
                    e.preventDefault();
                    handleSignOut();
                };
                authButton.addEventListener('click', signOutHandler);
            } else {
                // 未登入：顯示 Sign in / 登录
                authText.textContent = isZh ? '登录' : 'Sign in';
                authButton.setAttribute('href', '/signin/');
            }
        }        // 處理登出
        async function handleSignOut() {
            // 清除本地存儲
            localStorage.removeItem('auth_token');
            localStorage.removeItem('user_info');
            localStorage.removeItem('login_time');
            
            // 顯示登出成功訊息
            const isZh = document.documentElement.lang === 'zh';
            
            if (window.notify) {
                window.notify.success(
                    isZh ? '成功退出登录' : 'Logged out successfully',
                    { title: isZh ? '再見' : 'Goodbye' }
                );
                
                // 延遲重新整理，讓用戶看到通知
                setTimeout(() => {
                    window.location.reload();
                }, 1000);
            } else {
                // 如果通知系統不可用，直接重新整理
                window.location.reload();
            }
        }
        
        // 初始更新
        updateNavbarAuth();
        
        // 監聽存儲變化，以便在其他頁面登入/登出時同步更新
        window.addEventListener('storage', function(e) {
            if (e.key === 'auth_token') {
                updateNavbarAuth();
            }
        });
          // 監聽頁面可見性變化，以便在切換標籤時更新
        document.addEventListener('visibilitychange', function() {
            if (!document.hidden) {
                updateNavbarAuth();
            }
        });
    });
</script>