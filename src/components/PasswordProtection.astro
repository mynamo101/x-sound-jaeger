---
const { t } = Astro.props;
---

<div id="password-protection-modal" class="password-protection-modal">
    <div class="password-protection-content">
        <div class="password-icon">ðŸ”’</div>
        <h3>{t.password_protection.title}</h3>
        <p>{t.password_protection.description}</p>
        
        <form id="password-form" class="password-form">
            <input 
                type="password" 
                id="password-input" 
                class="password-input" 
                placeholder={t.password_protection.placeholder}
                required
            />
            <button type="submit" class="button password-submit-button">
                {t.password_protection.submit}
            </button>
        </form>
        
        <div id="password-error" class="password-error" style="display: none;">
            {t.password_protection.error}
        </div>
    </div>
</div>

<style>    .password-protection-modal {
        position: fixed;
        inset: 0;
        background: rgba(0,0,0,0.85);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 9999;
    }

    .password-protection-content {
        background: var(--background-color);
        border: 1px solid var(--text-color-40);
        color: var(--text-color);
        width: 100%;
        max-width: 420px;
        padding: 40px 32px 32px 32px;
        display: flex;
        flex-direction: column;
        align-items: center;
        box-sizing: border-box;
        text-align: center;
    }

    .password-icon {
        color: var(--text-color-80);
        font-size: 48px;
        margin-bottom: 20px;
    }

    .password-protection-content h3 {
        margin: 0 0 16px 0;
        font-size: 24px;
        font-weight: 600;
    }

    .password-protection-content p {
        margin: 0 0 24px 0;
        color: var(--text-color-80);
        line-height: 1.5;
    }

    .password-form {
        width: 100%;
        display: flex;
        flex-direction: column;
        gap: 16px;
    }

    .password-input {
        width: 100%;
        padding: 12px 16px;
        border: 1px solid var(--text-color-40);
        background: var(--background-color);
        color: var(--text-color);
        font-size: 16px;
        border-radius: 4px;
        box-sizing: border-box;
    }

    .password-input:focus {
        outline: none;
        border-color: var(--text-color);
    }

    .password-submit-button {
        width: 100%;
        margin: 0;
    }    .password-error {
        color: #ff4444;
        font-size: 14px;
        margin-top: 12px;
        text-align: center;
    }

    @keyframes shake {
        0%, 100% { transform: translateX(0); }
        10%, 30%, 50%, 70%, 90% { transform: translateX(-5px); }
        20%, 40%, 60%, 80% { transform: translateX(5px); }
    }

    /* Mobile styles */
    @media (max-width: 479px) {
        .password-protection-content {
            margin: 18px;
            padding: 32px 24px;
        }
        
        .password-protection-content h3 {
            font-size: 20px;
        }
        
        .password-icon {
            font-size: 40px;
        }
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const modal = document.getElementById('password-protection-modal') as HTMLElement;
        const form = document.getElementById('password-form') as HTMLFormElement;
        const input = document.getElementById('password-input') as HTMLInputElement;
        const errorDiv = document.getElementById('password-error') as HTMLElement;
        
        if (!modal || !form || !input || !errorDiv) return;

        // Get correct password from modal dataset
        const correctPassword = modal.dataset.correctPassword;
        
        // Check if password was already entered in this session
        const storedPassword = sessionStorage.getItem('post-password-' + window.location.pathname);
        
        if (storedPassword === correctPassword) {
            // Password already correct - unlock immediately
            unlockContent();
        } else {
            // Show password protection
            showPasswordProtection();
        }

        // Focus on password input
        input.focus();

        form.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const enteredPassword = input.value;
            
            if (enteredPassword === correctPassword) {
                // Password correct
                sessionStorage.setItem('post-password-' + window.location.pathname, enteredPassword);
                unlockContent();
            } else {
                // Wrong password
                showError();
            }
        });

        function showPasswordProtection() {
            document.body.classList.add('password-protected');
            modal.style.display = 'flex';
        }

        function unlockContent() {
            const article = document.querySelector('article.password-protected') as HTMLElement;
            if (article) {
                article.classList.add('password-protected-unlocked');
                article.classList.remove('password-protected');
            }
            document.body.classList.remove('password-protected');
            modal.style.display = 'none';
        }

        function showError() {
            errorDiv.style.display = 'block';
            input.value = '';
            input.focus();
            
            // Add shake animation to form
            form.style.animation = 'shake 0.5s ease-in-out';
            setTimeout(() => {
                form.style.animation = '';
            }, 500);
            
            // Hide error after 3 seconds
            setTimeout(() => {
                errorDiv.style.display = 'none';
            }, 3000);
        }
    });
</script>
